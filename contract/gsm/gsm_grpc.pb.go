// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: gsm/gsm.proto

package gsmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sms_GetSms_FullMethodName       = "/gsm.Sms/GetSms"
	Sms_GetFlashCall_FullMethodName = "/gsm.Sms/GetFlashCall"
)

// SmsClient is the client API for Sms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmsClient interface {
	GetSms(ctx context.Context, in *GetSmsRequest, opts ...grpc.CallOption) (*GetSmsResponse, error)
	GetFlashCall(ctx context.Context, in *GetFlashCallRequest, opts ...grpc.CallOption) (*GetFlashCallResponse, error)
}

type smsClient struct {
	cc grpc.ClientConnInterface
}

func NewSmsClient(cc grpc.ClientConnInterface) SmsClient {
	return &smsClient{cc}
}

func (c *smsClient) GetSms(ctx context.Context, in *GetSmsRequest, opts ...grpc.CallOption) (*GetSmsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSmsResponse)
	err := c.cc.Invoke(ctx, Sms_GetSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) GetFlashCall(ctx context.Context, in *GetFlashCallRequest, opts ...grpc.CallOption) (*GetFlashCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlashCallResponse)
	err := c.cc.Invoke(ctx, Sms_GetFlashCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmsServer is the server API for Sms service.
// All implementations must embed UnimplementedSmsServer
// for forward compatibility.
type SmsServer interface {
	GetSms(context.Context, *GetSmsRequest) (*GetSmsResponse, error)
	GetFlashCall(context.Context, *GetFlashCallRequest) (*GetFlashCallResponse, error)
	mustEmbedUnimplementedSmsServer()
}

// UnimplementedSmsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSmsServer struct{}

func (UnimplementedSmsServer) GetSms(context.Context, *GetSmsRequest) (*GetSmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSms not implemented")
}
func (UnimplementedSmsServer) GetFlashCall(context.Context, *GetFlashCallRequest) (*GetFlashCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlashCall not implemented")
}
func (UnimplementedSmsServer) mustEmbedUnimplementedSmsServer() {}
func (UnimplementedSmsServer) testEmbeddedByValue()             {}

// UnsafeSmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmsServer will
// result in compilation errors.
type UnsafeSmsServer interface {
	mustEmbedUnimplementedSmsServer()
}

func RegisterSmsServer(s grpc.ServiceRegistrar, srv SmsServer) {
	// If the following call pancis, it indicates UnimplementedSmsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sms_ServiceDesc, srv)
}

func _Sms_GetSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).GetSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_GetSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).GetSms(ctx, req.(*GetSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_GetFlashCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlashCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).GetFlashCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_GetFlashCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).GetFlashCall(ctx, req.(*GetFlashCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sms_ServiceDesc is the grpc.ServiceDesc for Sms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gsm.Sms",
	HandlerType: (*SmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSms",
			Handler:    _Sms_GetSms_Handler,
		},
		{
			MethodName: "GetFlashCall",
			Handler:    _Sms_GetFlashCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gsm/gsm.proto",
}
